#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

from thrift.Thrift import *

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class ThriftFlumeReport(object):
  """
  Attributes:
   - stringMetrics
   - longMetrics
   - doubleMetrics
  """

  thrift_spec = (
    None, # 0
    None, # 1
    None, # 2
    (3, TType.MAP, 'stringMetrics', (TType.STRING,None,TType.STRING,None), None, ), # 3
    (4, TType.MAP, 'longMetrics', (TType.STRING,None,TType.I64,None), None, ), # 4
    (5, TType.MAP, 'doubleMetrics', (TType.STRING,None,TType.DOUBLE,None), None, ), # 5
  )

  def __init__(self, stringMetrics=None, longMetrics=None, doubleMetrics=None,):
    self.stringMetrics = stringMetrics
    self.longMetrics = longMetrics
    self.doubleMetrics = doubleMetrics

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 3:
        if ftype == TType.MAP:
          self.stringMetrics = {}
          (_ktype1, _vtype2, _size0 ) = iprot.readMapBegin() 
          for _i4 in xrange(_size0):
            _key5 = iprot.readString();
            _val6 = iprot.readString();
            self.stringMetrics[_key5] = _val6
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.MAP:
          self.longMetrics = {}
          (_ktype8, _vtype9, _size7 ) = iprot.readMapBegin() 
          for _i11 in xrange(_size7):
            _key12 = iprot.readString();
            _val13 = iprot.readI64();
            self.longMetrics[_key12] = _val13
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.MAP:
          self.doubleMetrics = {}
          (_ktype15, _vtype16, _size14 ) = iprot.readMapBegin() 
          for _i18 in xrange(_size14):
            _key19 = iprot.readString();
            _val20 = iprot.readDouble();
            self.doubleMetrics[_key19] = _val20
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ThriftFlumeReport')
    if self.stringMetrics != None:
      oprot.writeFieldBegin('stringMetrics', TType.MAP, 3)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.stringMetrics))
      for kiter21,viter22 in self.stringMetrics.items():
        oprot.writeString(kiter21)
        oprot.writeString(viter22)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.longMetrics != None:
      oprot.writeFieldBegin('longMetrics', TType.MAP, 4)
      oprot.writeMapBegin(TType.STRING, TType.I64, len(self.longMetrics))
      for kiter23,viter24 in self.longMetrics.items():
        oprot.writeString(kiter23)
        oprot.writeI64(viter24)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.doubleMetrics != None:
      oprot.writeFieldBegin('doubleMetrics', TType.MAP, 5)
      oprot.writeMapBegin(TType.STRING, TType.DOUBLE, len(self.doubleMetrics))
      for kiter25,viter26 in self.doubleMetrics.items():
        oprot.writeString(kiter25)
        oprot.writeDouble(viter26)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
